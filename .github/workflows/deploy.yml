name: Build Docker Image, Deploy on Raspberry Pi

on:
  push:
    branches:
      - main

jobs:
  # --- ЗАДАЧА №1: ПРОВЕРКА И СБОРКА DOCKER-ОБРАЗА В ОБЛАКЕ ---
  build:
    runs-on: ubuntu-latest # Используем быстрый облачный runner
    permissions:
      contents: read
      packages: write # Даем права на запись в GitHub Packages (Container Registry)
    outputs:
      # Определяем выходную переменную, чтобы задача 'deploy' могла использовать ее
      image_name: ${{ steps.string.outputs.DOCKER_IMAGE_NAME_LC }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Check code formatting with Spotless
        # Этот шаг проверяет форматирование. Если есть ошибки, воркфлоу остановится здесь.
        run: ./gradlew spotlessCheck

      - name: Convert repository name to lowercase
        id: string
        # Этот шаг преобразует имя владельца и репозитория в нижний регистр.
        # Это необходимо, так как имена Docker-образов должны быть в нижнем регистре.
        run: echo "DOCKER_IMAGE_NAME_LC=$(echo ghcr.io/${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Имя пользователя, инициировавшего воркфлоу
          password: ${{ secrets.GITHUB_TOKEN }} # Специальный токен, предоставляемый GitHub

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Использовать Dockerfile из корня проекта
          push: true # Публиковать образ после сборки
          tags: ${{ steps.string.outputs.DOCKER_IMAGE_NAME_LC }}:latest # Присвоить образу тег 'latest'

  # --- ЗАДАЧА №2: ДЕПЛОЙ НА RASPBERRY PI ---
  deploy:
    needs: build # Эта задача ждет завершения 'build' и использует ее результат
    runs-on: self-hosted # А эта выполняется на вашем Pi

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy new version to Docker
        run: |
          # Используем имя образа, полученное из задачи 'build'
          IMAGE_NAME="${{ needs.build.outputs.image_name }}:latest"
          CONTAINER_NAME="obed-bot"

          echo "Pulling latest Docker image: $IMAGE_NAME"
          docker pull $IMAGE_NAME

          echo "Stopping and removing old container if it exists..."
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          echo "Starting new container..."
          # Запускаем новый контейнер в фоновом режиме (-d)
          # и настраиваем автоматический перезапуск (--restart always)
          docker run \
            -d \
            --restart always \
            --name $CONTAINER_NAME \
            $IMAGE_NAME
          
          echo "Cleaning up old images..."
          docker image prune -f

          echo "Deployment finished!"